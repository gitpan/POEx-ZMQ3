# NAME

POEx::ZMQ3 - \*\*DEPRECATED\*\* See POEx::ZMQ instead

# SYNOPSIS

    use POEx::ZMQ3;
    # A POEx::ZMQ3::Sockets instance:
    my $zmq = POEx::ZMQ3->new;
    # See POEx::ZMQ3::Sockets for a complete example.

# DESCRIPTION

**This distribution is deprecated and known broken with ZMQ4+!**
It will likely be deleted in the future.

**See [POEx::ZMQ](https://metacpan.org/pod/POEx::ZMQ) instead**. As of this writing, developer releases are
available on CPAN, and you can help by contributing issues and/or fixes for
same at [http://www.github.com/avenj/poex-zmq](http://www.github.com/avenj/poex-zmq).

A set of roles and classes providing a [POE](https://metacpan.org/pod/POE)-enabled asynchronous interface
to **ZeroMQ** (version 3) via [ZMQ::LibZMQ3](https://metacpan.org/pod/ZMQ::LibZMQ3).

ZeroMQ is a powerful high-performance messaging library aimed at
concurrent/distributed applications. If you're just getting started with
ZeroMQ, it is strongly advised you read the **zguide**
([http://zguide.zeromq.org](http://zguide.zeromq.org)) before jumping in.

You will need **zeromq-3.2.2** or newer: [http://www.zeromq.org](http://www.zeromq.org)

This is early development software; see ["BUGS"](#bugs).

## Classes

[POEx::ZMQ3::Sockets](https://metacpan.org/pod/POEx::ZMQ3::Sockets) is the backend ZMQ component. It can be used directly
to add flexible ZeroMQ functionality to your POE applications.

There are some higher-level components providing simple access to single
sockets belonging to basic types:

[POEx::ZMQ3::Publisher](https://metacpan.org/pod/POEx::ZMQ3::Publisher) and [POEx::ZMQ3::Subscriber](https://metacpan.org/pod/POEx::ZMQ3::Subscriber) implement PUB and SUB
type ZeroMQ sockets.

[POEx::ZMQ3::Requestor](https://metacpan.org/pod/POEx::ZMQ3::Requestor) and [POEx::ZMQ3::Replier](https://metacpan.org/pod/POEx::ZMQ3::Replier) implement REQ and REP type
sockets.

These are very simple base implementations. They can be subclassed or combined
in varied ways to do more powerful things. 
As of this writing, more advanced socket types are lacking component classes,
but these can be easily implemented with [POEx::ZMQ3::Sockets](https://metacpan.org/pod/POEx::ZMQ3::Sockets).

## Roles

[MooX::Role::POE::Emitter](https://metacpan.org/pod/MooX::Role::POE::Emitter) provides [POE](https://metacpan.org/pod/POE) event emitter functionality and
some endpoint management methods.

# CAVEATS

## Forking

If your application forks, the global context object needs to be reset by 
calling `POEx::ZMQ3::Context->reset` before creating sockets. 
See [POEx::ZMQ3::Context](https://metacpan.org/pod/POEx::ZMQ3::Context).

# BUGS

Probably many undiscovered; this software is fairly early in development.

See [http://github.com/avenj/poex-zmq3](http://github.com/avenj/poex-zmq3) and feel free to report bugs via
either **RT** or **GitHub**.

# SEE ALSO

The `examples/` directory in the distribution and perhaps the tests in `t/`.

[ZMQ::LibZMQ3](https://metacpan.org/pod/ZMQ::LibZMQ3)

[http://www.zeromq.org](http://www.zeromq.org)

# AUTHOR

Jon Portnoy <avenj@cobaltirc.org>
